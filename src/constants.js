const CACHE_STATUSES = [
    {
        isIncludeCalculation: true,
        value: 'hit', // Served from cache
    },
    {
        isIncludeCalculation: false,
        value: 'none', // Not served from cache or origin. Response generated by Cloudflare.
    },
];

const DEFAULT_INCLUDE_CACHE_STATUSES = CACHE_STATUSES.filter(s => s.isIncludeCalculation).map(s => s.value);
const DEFAULT_EXCLUDE_CACHE_STATUSES = CACHE_STATUSES.filter(s => !s.isIncludeCalculation).map(s => s.value);

const DEFAULT_TIME_WINDOW = '24 hours';
const TIME_WINDOWS = {
    '30 minutes': () => {
        const sinceTime = new Date();
        sinceTime.setMinutes(sinceTime.getMinutes() - 30);
        return sinceTime;
    },
    '6 hours': () => {
        const sinceTime = new Date();
        sinceTime.setHours(sinceTime.getHours() - 6);
        return sinceTime;
    },
    '12 hours': () => {
        const sinceTime = new Date();
        sinceTime.setHours(sinceTime.getHours() - 12);
        return sinceTime;
    },
    '24 hours': () => {
        const sinceTime = new Date();
        sinceTime.setHours(sinceTime.getHours() - 24);
        return sinceTime;
    },
    '48 hours': () => {
        const sinceTime = new Date();
        sinceTime.setHours(sinceTime.getHours() - 48);
        return sinceTime;
    },
    '7 days': () => {
        const sinceTime = new Date();
        sinceTime.setDate(sinceTime.getDate() - 7);
        return sinceTime;
    },
    '14 days': () => {
        const sinceTime = new Date();
        sinceTime.setDate(sinceTime.getDate() - 14);
        return sinceTime;
    },
    '21 days': () => {
        const sinceTime = new Date();
        sinceTime.setDate(sinceTime.getDate() - 21);
        return sinceTime;
    },
    '30 days': () => {
        const sinceTime = new Date();
        sinceTime.setDate(sinceTime.getDate() - 30);
        return sinceTime;
    },
};

const getTimeRange = ({ timeWindow, since, until }) => {
    if (since && until) {
        return {
            sinceTime: new Date(since),
            untilTime: new Date(until)
        };
    }

    const sinceTime = timeWindow ? TIME_WINDOWS[timeWindow]() : TIME_WINDOWS[DEFAULT_TIME_WINDOW]();
    const untilTime = new Date();

    return { sinceTime, untilTime };
};

module.exports = {
    CACHE_STATUSES,
    DEFAULT_INCLUDE_CACHE_STATUSES,
    DEFAULT_EXCLUDE_CACHE_STATUSES,
    DEFAULT_TIME_WINDOW,
    TIME_WINDOWS,
    getTimeRange,
};
